#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>

int jump_search(const std::vector<int>& arr, int x) {
    int n = arr.size();
    int step = std::sqrt(n);

    int prev = 0;
    while (arr[std::min(step, n)-1] < x) {
        prev = step;
        step += std::sqrt(n);
        if (prev >= n) {
            return -1;
        }
    }

    while (arr[prev] < x) {
        prev++;
        if (prev == std::min(step, n)) {
            return -1;
        }
    }

    if (arr[prev] == x) {
        return prev;
    }

    return -1;
}

int main() {
    std::vector<int> arr = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    int x = 7;

    int index = jump_search(arr, x);

    if (index != -1) {
        std::cout << "Element " << x << " found at index " << index << std::endl;
    } else {
        std::cout << "Element " << x << " not found in the array" << std::endl;
    }

    return 0;
}
